# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vpc983fGyKj8EIP4Lc_zGEB3kel7sHKD
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Perceptron, LogisticRegression
from sklearn.metrics import accuracy_score
from matplotlib.colors import ListedColormap
from sklearn.svm import SVC

# newLine for GITHUB check

x, y = make_circles(n_samples=512, random_state=123, noise=0.22, factor=0.16)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y)

# Самостоятельный подбор параметров
svm = SVC(kernel='rbf', C=1.0, gamma=20, random_state=123)
svm.fit(x_train, y_train)

def plotDecisionRegions(x, y, classifier, resolution=0.02, test_idx=None):
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    x1_min, x1_max = x[:,0].min() - 1, x[:,0].max() + 1
    x2_min, x2_max = x[:,1].min() - 1, x[:,1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))

    z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    z = z.reshape(xx1.shape)

    plt.contourf(xx1, xx2, z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=x[y==cl, 0], y=x[y==cl, 1], alpha=0.8, c=colors[idx],
                    edgecolor='black', marker = markers[idx], label=cl)
        if test_idx:
            x_test = x[test_idx, :]
            plt.scatter(x_test[:, 0], x_test[:, 1], c='', alpha=1.0,
                        edgecolor='black', linewidths=1, marker='o', s=120,
                        label='test set')

plotDecisionRegions(x_test, y_test, svm)
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('SVM с ручным подбором параметров')
plt.show()

# Автоматический подбор параметров
svm_grid = SVC(kernel='rbf', random_state=123)

c_array = np.logspace(-3, 3, num=14)
gamma_array = np.logspace(-5, 2, num=8)

grid = GridSearchCV(svm_grid, param_grid={'C':c_array, 'gamma':gamma_array})

grid.fit(x_train, y_train)

svm_grid.fit(x_train, y_train)

print(f'''Удельное количество ошибок на обучающем наборе: {np.mean(y_train != svm_grid.predict(x_train))}
Удельное количество ошибок на тестовом наборе: {np.mean(y_test != svm_grid.predict(x_test))}''')

plotDecisionRegions(x_test, y_test, svm_grid)
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('SVM с автоматическим подбором параметров')
plt.show()

# Самостоятельный подбор параметров
decision_tree = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=123)
decision_tree.fit(x_train, y_train)

print(f'''Удельное количество ошибок на обучающем наборе: {np.mean(y_train != decision_tree.predict(x_train))}
Удельное количество ошибок на тестовом наборе: {np.mean(y_test != decision_tree.predict(x_test))}''')

plotDecisionRegions(x_test, y_test, decision_tree)
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('DecisionTreeClassifier с ручным подбором параметров')
plt.show()

# Автоматический подбор параметров
decision_tree_grid = DecisionTreeClassifier(criterion='entropy', random_state=123)

max_depth_array = np.arange(1,31,1)

grid_tree = GridSearchCV(decision_tree_grid, param_grid={'max_depth':max_depth_array})
grid_tree.fit(x_train, y_train)

decision_tree_grid.fit(x_train, y_train)

print(f'''Удельное количество ошибок на обучающем наборе: {np.mean(y_train != decision_tree_grid.predict(x_train))}
Удельное количество ошибок на тестовом наборе: {np.mean(y_test != decision_tree_grid.predict(x_test))}''')

plotDecisionRegions(x_test, y_test, decision_tree_grid)
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('DecisionTreeClassifier с автоматическим подбором параметров')
plt.show()